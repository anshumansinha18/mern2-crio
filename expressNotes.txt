API VS ROUTES
-------------

www.youtube.com - API
www.youtube.com/watch - Route(/watch is route)


EXPRESS
-------

Express is a nodejs framework which is built on top of http module of node to handle requests.


SENDING HTML OR JSON RESPONSE USING EXPRESS:
--------------------------------------------

app.get('/', (res, req)=>{
  res.send('<h1>Hello</h1>')           //FOR HTML
})

app.get('/', (res, req)=>{ 
  res.json({name: 'Anshuman'});         //FOR JSON RESPONSE
})

-----------------------------------------------



DIFFERNCE BETWEEN REQUEST.SENDSTATUS AND REQUEST.STATUS
------------------------------------------------------------

resposne.sendStatus(400): means that you cannot send a message after it using response.json() or res.send().

response.status(400): means that you can send message after writing this statement.


CONTROLLERS
------------------------------------------

* Consider a route: /currencies.
* This route can have a lot of params or query params.
* Rather that defining callback functions for all those params. We can create a single file and store all of our controllers inside it. 

Naming Convention for the controller file: <route>.controller.js
     Eg: currencies.controller.js

Controllers: callback functions required for routes is called controller.
Every route has a controller.


IMPORTING CONTROLLERS FROM CONTROLLER.JSON
-------------------------------------------

Using import and export in the node js is not allowed. It'll give error. 
Use require to import function or variables from different files.

In order to export a function or folder, we have to use: 
module.exports = getCurrencies;


ORDER OF ROUTES MATTER:
------------------------

Order in which we write the routes are important. Whichever gets matched first is executed.


DOTENV:
---------

When using .env file, use DOTENV package.
Install: npm install dotenv --save-dev

We need to require dotenv at the top of the starting point of our server i.e at the top of index.js


AUTHORIZATION VS AUTHENTICATION:
----------------------------------

Authentication: If the user is who they say they are.
Authorization: If the user has permission to perform a task or not.

Authentication comes first then authorization happens after it.


CODE MODULARITY:
------------------

Every function needs to have only one task.
If one function is fetching the data from the server and also doing Authentication, then code modularity is voilated. 
That's where middleware comes in handy.

MIDDLEWARES:
--------------

Middlewares are something which runs between the request is sent to the server and response is sent from the server. 

app.get("/", (req, res)=>{
  console.log("Something");
  res.send('<h1>HI</h2>')
})

In this case, (req, res) and console.log("Something") is a middleware because it happens between request received and response being sent.
