INTRODUCTION:
-------------------

One Mongo Server --->  Multiple Databases
One Database ------> Multiple collections
One Collection -----> Multiple documents


USE DB:
--------

use test: this will select the database named test.

DISPLAY COLLECTIONS INSIDE DATABASE:
------------------------------------

command: db.getCollectionNames()

This will display all the collection names present in the selected database.


CREATE A NEW COLLECTION IN DATABASE:
-------------------------------------

command: db.createCollections("nameofthecollection");

Eg: db.createCollections("blogs").


INSERTING DOCUMENTS INSIDE COLLECTIONS IN MONGODB:
-----------------------------------

command: db.nameofthecollection.insert({key1: value1, key2:value2})

Eg: db.blogs.insert({publishedAt: null, author: [], content:""})


FIND DOCUMENTS IN DATABASE:
---------------------------

command 1: db.nameofthecollection.find()
command 2: db.nameofthecollection.find({})
command 3: db.nameofthecollection.find({key:value})
command 4: db.student.find({key:{nestedKey1: value1, nestedKey2: value2}})

Eg: db.blogs.find({}).pretty();

FIND NUMBER OF DOCUMENTS IN DATABASE:
-------------------------------------

Eg: db.blogs.find({}).count()


LIMIT THE NUMBER OF DOCUMENTS TO BE DISPLATED TO 1:
---------------------------------------------------

Eg: db.blogs.find({}).limit(1).pretty()


PROBLEM WITH MONGODB:
---------------------

Suppose while storing data, we do something like this:
  document1:
   {
    author: []
    title: ""
   }

  document2:
   {
    author: ""
    title: []
   }

Frontend logic: 
  author.map((i)=><h1>i</h2)

Now this frontend logic will give error because at one time the author is array and another time it is string. 

In order to fix the issue, mongoose arrived. 


MONGOOSE:
----------

Mongoose is a Nodejs based Object Data Modelling(ODM) for MongoDb.

It helps define the relationship between data, provides schema validation

Mongoose help us define schema and provides an interface to perform CRUD operation.


VERSION AND ID IN MONGODB:
--------------------------

Whenver we store our data in mongodb database, mongodb creates two extra fields: 
__v:
_id:

__v: denotes version
_id: unique for every document

FINDING A MATCH IN AN ARRAY IN MONGODB:
--------------------------------------

const data = await Blogs.find({
      title: title,
      author: {
        $elemMatch: {
          email: 'abcd@gmail.com',
        },
      },
    });

Here, author is an array. So we have to use $elemMatch to find the match.

FINDING DOCUMENTS USING OR CONDITION:
--------------------------------------

 const data = await Blogs.find({
      $or: [
        { title: "John" },
        {
          author: {
            $elemMatch: {
              email: "a@gmail.com",
            },
          },
        },
      ],
    });

'or' takes an array. 
It checks for document with either title = John or email: a@gmail.com

